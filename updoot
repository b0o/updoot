#!/usr/bin/env bash

# updoot unifies the update process for your entire system
#
# Copyright (c) 2018-2020 Maddison Hellstrom (github.com/b0o)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail
IFS=$'\n\t'

declare -xg global_start_time
global_start_time="$(date +%s)"

declare -xg base basedir basename

base="$(realpath "${BASH_SOURCE[0]}")"
basedir="$(dirname "$base")"
basename="$(basename "$base")"

declare -xg prog="updoot"
declare -xg version="v0.0.1"
declare -xg authors=("Maddison Hellstrom <https://github.com/b0o>")
declare -xg repository="https://github.com/b0o/updoot"
declare -xg license="GPL-3.0-or-later"
declare -xg license_url="https://www.gnu.org/licenses/gpl-3.0.txt"

# colors
declare -xg RCol='\e[0m'

# Regular
declare -xg Bla='\e[0;30m'
declare -xg Red='\e[0;31m'
declare -xg Gre='\e[0;32m'
declare -xg Yel='\e[0;33m'
declare -xg Blu='\e[0;34m'
declare -xg Pur='\e[0;35m'
declare -xg Cya='\e[0;36m'
declare -xg Whi='\e[0;37m'

# Bold
declare -xg BBla='\e[1;30m'
declare -xg BRed='\e[1;31m'
declare -xg BGre='\e[1;32m'
declare -xg BYel='\e[1;33m'
declare -xg BBlu='\e[1;34m'
declare -xg BPur='\e[1;35m'
declare -xg BCya='\e[1;36m'
declare -xg BWhi='\e[1;37m'

# Underline
declare -xg UBla='\e[4;30m'
declare -xg URed='\e[4;31m'
declare -xg UGre='\e[4;32m'
declare -xg UYel='\e[4;33m'
declare -xg UBlu='\e[4;34m'
declare -xg UPur='\e[4;35m'
declare -xg UCya='\e[4;36m'
declare -xg UWhi='\e[4;37m'

# High Intensity
declare -xg IBla='\e[0;90m'
declare -xg IRed='\e[0;91m'
declare -xg IGre='\e[0;92m'
declare -xg IYel='\e[0;93m'
declare -xg IBlu='\e[0;94m'
declare -xg IPur='\e[0;95m'
declare -xg ICya='\e[0;96m'
declare -xg IWhi='\e[0;97m'

# BoldHigh Intens
declare -xg BIBla='\e[1;90m'
declare -xg BIRed='\e[1;91m'
declare -xg BIGre='\e[1;92m'
declare -xg BIYel='\e[1;93m'
declare -xg BIBlu='\e[1;94m'
declare -xg BIPur='\e[1;95m'
declare -xg BICya='\e[1;96m'
declare -xg BIWhi='\e[1;97m'

# Background
declare -xg On_Bla='\e[40m'
declare -xg On_Red='\e[41m'
declare -xg On_Gre='\e[42m'
declare -xg On_Yel='\e[43m'
declare -xg On_Blu='\e[44m'
declare -xg On_Pur='\e[45m'
declare -xg On_Cya='\e[46m'
declare -xg On_Whi='\e[47m'

# High Intensity Backgrounds
declare -xg On_IBla='\e[0;100m'
declare -xg On_IRed='\e[0;101m'
declare -xg On_IGre='\e[0;102m'
declare -xg On_IYel='\e[0;103m'
declare -xg On_IBlu='\e[0;104m'
declare -xg On_IPur='\e[0;105m'
declare -xg On_ICya='\e[0;106m'
declare -xg On_IWhi='\e[0;107m'

# Status Messages
declare -xg Ifo="${IGre}[INFO]  ${RCol}"
declare -xg Wrn="${IYel}[WARN]  ${RCol}"
declare -xg Err="${IRed}[ERR]   ${RCol}"
declare -xg Dbg="${ICya}[DEBUG] ${RCol}"

# paths
declare -xg libdirs=(# TODO
  "$basedir"
  "${XDG_CONFIG_HOME:-$HOME/.config}/$prog"
)

# Exit status codes
declare -rxg C_USAGE=60
declare -rxg C_SKIP=61
declare -rxg C_UNKNOWN=62
declare -rxg C_USAGE_ERR=70
declare -rxg C_DEP_NOTFOUND=71
declare -rxg C_CONFIG_ERR=72
declare -rxg C_UPDATE_ERR=73
declare -rxg C_SETUP_ERR=74
declare -rxg C_LOCK_ERR=75
declare -rxg C_INT=130

# Providers registry
declare -xgA PROVIDERS=()
declare -xgA PROVIDERS_HIDDEN=()
declare -xgA PROVIDERS_USAGE=()
declare -xgA PROVIDERS_VARS=()

# Global state
declare -xg update_provider
declare -xgi update_index=0
declare -xgi update_total=0
declare -xgi update_success=0
declare -xgi update_skip=0
declare -xgi update_fail=0
declare -xgi initialized=0
declare -xgi locked=0
declare -xgi dirty=0

# --- utils

function log_msg() {
  printf '%b\n' "$@" >&2
}
export -f log_msg

function vlog_msg() {
  if [[ ${UPDOOT_VERBOSE:-0} -eq 1 ]]; then
    printf '%b\n' "$@" >&2
  fi
}
export -f vlog_msg

function handle_sig() {
  local msg_proc="Process"
  local code=1
  local opt OPTARG OPTIND
  OPTIND=1
  while getopts "cx:" opt "$@"; do
    case $opt in
    c)
      msg_proc="Child process"
      ;;
    x)
      code=$OPTARG
      ;;
    \?)
      break
      ;;
    esac
  done
  shift $((OPTIND - 1))

  local sig="${1:-UNKNOWN}"
  log_msg "\\n${Wrn}$msg_proc caught ${Yel}SIG${sig}${RCol}"
  exit "$code"
}
export -f handle_sig

function choose() {
  local prompt="Choose"
  local -a args=("yes" "No")

  [[ $# -gt 0 ]] && {
    [[ $1 != "-" ]] && prompt="$1"
    shift
  }
  [[ $# -gt 0 ]] && args=("$@")

  local -a opts=()
  local -A opt_strs_l=()
  local -A opt_strs_r=()
  local opt_default

  local msg=""

  for arg in "${args[@]}"; do
    [[ -z "$arg" ]] && {
      log_msg "${Err}choose: Empty option"
      echo "?"
      return 1
    }

    local opt_key
    local opt_str_l
    local opt_str_r

    if [[ $arg =~ (.*)\[(.)\](.*) ]]; then
      opt_key="${BASH_REMATCH[2]}"
      opt_str_l="${BASH_REMATCH[1]}"
      opt_str_r="${BASH_REMATCH[3]}"
    else
      opt_key="${arg:0:1}"
      opt_str_l=""
      opt_str_r="${arg:1}"
    fi

    [[ -v opt_strs_l["$opt_key"] ]] && {
      log_msg "${Err}choose: Duplicate option with key ${Yel}${opt_key}${RCol}"
      echo "?"
      return 1
    }

    opts+=("$opt_key")
    opt_strs_l["$opt_key"]="$opt_str_l"
    opt_strs_r["$opt_key"]="$opt_str_r"

    [[ "$opt_key" =~ ^[A-Z]$ ]] && {
      [[ -v opt_default ]] && {
        log_msg "${Err}choose: Expected at most one default option"
        echo "?"
        return 1
      }
      opt_default="$opt_key"
    }

    [[ -n "$msg" ]] && msg+=" / "
    msg+="${RCol}"
    [[ -v opt_default && "$opt_key" == "$opt_default" ]] && msg+="${Blu}"
    msg+="${opt_strs_l["$opt_key"]}${RCol}["
    [[ -v opt_default && "$opt_key" == "$opt_default" ]] && msg+="${Blu}"
    msg+="${opt_key}${RCol}]"
    [[ -v opt_default && "$opt_key" == "$opt_default" ]] && msg+="${Blu}"
    msg+="${opt_strs_r["$opt_key"]}${RCol}"
  done

  [[ ${#opts[@]} -lt 2 ]] && {
    log_msg "${Err}choose: Expected at least two options"
    echo "?"
    return 1
  }

  while true; do
    log_msg "${prompt} ${msg}"
    read -rp "> " yn
    local choice
    if [[ -v opt_strs_l["${yn^}"] ]]; then
      choice="${yn^}"
    elif [[ -v opt_strs_l["${yn,}"] ]]; then
      choice="${yn,}"
    elif [[ -z "$yn" ]]; then
      [[ ! -v opt_default ]] && {
        log_msg "Choice required"
        continue
      }
      choice="$opt_default"
    else
      log_msg "Invalid choice: ${Red}${yn}${RCol}"
      continue
    fi

    echo "$choice"
    return 0
  done
  echo "?"
  return 1
}
export -f choose

function cmd_exists() {
  local cmd="${1:-}"
  if [[ -z "$cmd" ]]; then
    log_msg "${Err}No command specified."
    return 1
  fi
  command -v "${cmd}" > /dev/null || {
    log_msg "${Wrn}Candidate not found: '${Yel}${cmd}${RCol}'."
    return 1
  }
  log_msg "${Ifo}Using '${Cya}${cmd}${RCol}'."
}
export -f cmd_exists

function run_cmd() {
  ({
    IFS=$' '
    vlog_msg "${Dbg}run_cmd ${Yel}$*${RCol}"
  })
  "$@"
  code=$?
  if [[ $code -ne 0 ]]; then
    log_msg "${Wrn}Command '${Yel}${*}${RCol}' exited with code ${Yel}${code}${RCol}"
    return $C_UPDATE_ERR
  fi
  return 0
}
export -f run_cmd

function load_configs() {
  local libdir config provider
  for libdir in "${libdirs[@]}"; do

    config="$(realpath -m "$libdir/config")"
    if [[ -e "$config" ]]; then
      # shellcheck source=./config
      source "$config" < /dev/null || {
        log_msg "${Err}Failed loading config '${Yel}$config${RCol}' from '${Pur}$libdir${RCol}'"
        return $C_SETUP_ERR # TODO
      }
      vlog_msg "${Dbg}Loaded config '${Cya}$config${RCol}'"
    fi
  done

  for libdir in "${libdirs[@]}"; do
    # Add helpers directory to PATH
    if [[ -d "$libdir/helpers" ]]; then
      declare -gx PATH="$libdir/helpers:$PATH"
    fi
  done

  for libdir in "${libdirs[@]}"; do
    if [[ -d "$libdir/providers" ]]; then
      while read -r provider; do
        [[ -n "$provider" ]] || continue
        # shellcheck source=./providers/dummy
        source "$provider" < /dev/null || {
          log_msg "${Err}Failed loading provider '${Yel}$provider${RCol}' from '${Pur}$libdir${RCol}'"
          return $C_SETUP_ERR # TODO
        }
        vlog_msg "${Dbg}Loaded provider '${Cya}$provider${RCol}'"
      done <<< "$(find "$libdir/providers" -mindepth 1 -maxdepth 1 -type f | sort)"
    fi
  done

  # configuration defaults
  declare -xg UPDOOT_VERBOSE=${UPDOOT_VERBOSE:-0}
  declare -xg UPDOOT_LOG_MAXAGE=${UPDOOT_LOG_MAXAGE:-30}
  declare -xg UPDOOT_STRICT=${UPDOOT_STRICT:-1}

  declare -xg UPDOOT_CACHE_DIR="${UPDOOT_CACHE_DIR:-${XDG_CACHE_HOME:-$HOME/.cache}/$prog}"

  # TODO: provider variables
  # TODO: auto-detect supported providers

  # Runtime paths
  declare -xg lockfile="$UPDOOT_CACHE_DIR/lock"
  declare -xg logdir="$UPDOOT_CACHE_DIR/log"
  declare -xg histdir="$UPDOOT_CACHE_DIR/hist"
  declare -xg tempdir
}

function setup() {
  dirty=1

  if [[ ! -d "$UPDOOT_CACHE_DIR" ]]; then
    mkdir -p "$UPDOOT_CACHE_DIR" || {
      log_msg "${Err}Failed to create \$UPDOOT_CACHE_DIR (${Yel}${UPDOOT_CACHE_DIR}${RCol})"
      return $C_CONFIG_ERR
    }
    vlog_msg "${Dbg}Created \$UPDOOT_CACHE_DIR (${Cya}${UPDOOT_CACHE_DIR}${RCol})"
  fi

  if [[ ! -d "$logdir" ]]; then
    mkdir -p "$logdir" || {
      log_msg "${Err}Failed to create logdir (${Yel}${logdir}${RCol})"
      return $C_SETUP_ERR
    }
    vlog_msg "${Dbg}Created logdir (${Cya}${logdir}${RCol})"
  fi

  if [[ ! -d "$histdir" ]]; then
    mkdir -p "$histdir" || {
      log_msg "${Err}Failed to create histdir (${Yel}${histdir}${RCol})"
      return $C_SETUP_ERR
    }
    vlog_msg "${Dbg}Created histdir (${Cya}${histdir}${RCol})"
  fi

  tempdir="$(mktemp --directory -t "updoot_${global_start_time}_XXXXXX")" || {
    log_msg "${Err}Failed to create tempdir"
    return $C_SETUP_ERR
  }
  vlog_msg "${Dbg}Created tempdir (${Cya}${tempdir}${RCol})"

  return 0
}

function lock() {
  if [[ -e "$lockfile" ]]; then
    local lock_pid
    lock_pid="$(head -1 "$lockfile")" || return $C_LOCK_ERR

    if ps -q "$lock_pid" &> /dev/null; then
      log_msg "${Err}Updoot is already running (pid=${Yel}${lock_pid}${RCol})"
      return $C_LOCK_ERR
    fi

    log_msg "${Wrn}Found stray lockfile '${Yel}$lockfile${RCol}'. Removing..."
    rm "$lockfile" || return $C_LOCK_ERR
  fi

  echo "$$" >> "$lockfile" || return $C_LOCK_ERR
  locked=1
  vlog_msg "${Dbg}Locked (${Cya}${lockfile}${RCol})"

  return 0
}

function unlock() {
  if [[ $locked -eq 0 ]]; then
    vlog_msg "${Dbg}unlock: not locked, skipping."
    return 0
  fi

  if [[ ! -e "$lockfile" ]]; then
    log_msg "${Err}Lockfile '${Cya}$lockfile${RCol}' disappeared"
    return $C_LOCK_ERR
  fi

  local -i lock_pid
  lock_pid="$(head -1 "$lockfile")" || return $C_LOCK_ERR

  if [[ $lock_pid -ne $$ ]]; then
    log_msg "${Err}unlock: Lock file found but PID differs (pid=${Yel}${$}${RCol}, lock_pid=${Yel}${lock_pid}${RCol})"
    return $C_LOCK_ERR
  fi

  rm "$lockfile" || return $C_LOCK_ERR
  locked=0
  vlog_msg "${Dbg}Unlocked (${Cya}$lockfile${RCol})"

  return 0
}

function cleanup() {
  if [[ $dirty -eq 0 ]]; then
    vlog_msg "${Dbg}Not dirty, skipping cleanup"
    return 0
  fi

  if [[ -v "tempdir" && -d "$tempdir" ]]; then
    vlog_msg "${Dbg}Purging temp dir '${Cya}${tempdir}${RCol}'."
    rm --preserve-root --one-file-system -rf "$tempdir"
  fi

  if [[ -d "$logdir" ]]; then
    mapfile -t old < <(find "$logdir" \
      -depth -maxdepth 1 -type f -mtime "+${UPDOOT_LOG_MAXAGE}")

    if [[ ${#old[@]} -gt 0 ]]; then
      log_msg "${Ifo}Purging ${Cya}${#old[@]}${RCol} log files older than ${Pur}${UPDOOT_LOG_MAXAGE}${RCol} days."
      rm "${old[@]}"
    fi
  fi

  dirty=0
  vlog_msg "${Dbg}Cleanup completed"

  return 0
}

function handle_exit() {
  local code=$?
  vlog_msg "${Dbg}handle_exit: code ${Yel}${code}${RCol}"

  if [[ $code -eq $C_LOCK_ERR ]]; then
    exit $code
  fi

  local now total_elapsed
  now=$(date +%s)
  total_elapsed=$((now - global_start_time))
  if [[ $code -eq 0 ]]; then
    echo "$now" >> "$histdir/any"
  fi

  cleanup
  unlock

  # shellcheck disable=2254
  case $code in
  $C_USAGE | $C_USAGE_ERR | $C_SETUP_ERR | $C_CONFIG_ERR)
    exit $code
    ;;
  esac

  update_skip=$((update_skip + update_total - update_index))

  local skipmsg=""
  if [[ $update_skip -gt 0 ]]; then
    skipmsg="${Yel}${update_skip} skipped${RCol}"
  fi

  local failmsg=""
  if [[ $update_fail -gt 0 ]]; then
    failmsg="${Red}${update_fail} failed${RCol}"
  fi

  local successmsg="${Blu}${update_success} updated${RCol}"

  local statusmsg="$successmsg"
  if [[ -n "$statusmsg" && -n "$skipmsg" ]]; then
    statusmsg+=", "
  fi
  statusmsg+="$skipmsg"
  if [[ -n "$statusmsg" && -n "$failmsg" ]]; then
    statusmsg+=", "
  fi
  statusmsg+="$failmsg"

  log_msg "${Ifo}Completed in ${Cya}${total_elapsed} seconds${RCol} (${statusmsg})"

  exit $code
}

function provider_usage() {
  local name="${1:-${update_provider:-}}"
  if ! [[ -v "PROVIDERS_USAGE[$name]" ]]; then
    log_msg "${Err}provider_usage: unknown provider ${Yel}$name${RCol}"
    return $C_USAGE_ERR
  fi
  local -a usage
  mapfile -t usage << EOF
usage: $prog $name
${PROVIDERS_USAGE[$name]}
EOF
  printf '%s\n' "${usage[@]}" >&2
}
export -f provider_usage

function register_provider() {
  local func name
  local -i hidden
  local -a vars=()

  local opt OPTARG OPTIND
  OPTIND=1
  while getopts ":hv:" opt "$@"; do
    case "$opt" in
    h)
      hidden=1
      ;;
    v)
      vars+=("$OPTARG")
      ;;
    \?)
      log_msg "${Err}register_provider: invalid option ${Yel}${opt}${RCol}"
      return $C_USAGE_ERR
      ;;
    esac
  done
  shift $((OPTIND - 1))

  case $# in
  0)
    log_msg "${Err}register_provider: expected argument"
    return $C_CONFIG_ERR
    ;;
  1)
    func="$1"
    name="$1"
    ;;
  2)
    func="$1"
    name="$2"
    ;;
  *)
    log_msg "${Err}register_provider: expected 1 or 2 arguments, got ${Yel}$#${RCol} (${Yel}$*${RCol})"
    return $C_CONFIG_ERR
    ;;
  esac

  if [[ $(type -t "$func") != 'function' ]]; then
    log_msg "${Err}register_provider: not a function: ${Yel}${func}${RCol}"
    return $C_CONFIG_ERR
  fi

  PROVIDERS["$name"]="$func"

  if [[ -v hidden && $hidden -eq 1 ]]; then
    PROVIDERS_HIDDEN["$name"]=1
  fi

  if read -rt 0; then
    PROVIDERS_USAGE["$name"]="$(cat)"
  fi

  if [[ ${#vars[@]} -gt 0 ]]; then
    PROVIDERS_VARS["$name"]="$(printf '%s\n' "${vars[@]}")"
  fi

  if [[ "$name" != "$func" ]]; then
    vlog_msg "${Dbg}Registered provider: ${Cya}${name}${RCol} -> ${Pur}${func}${RCol}${hidden:+ (${Yel}hidden${RCol})}"
  else
    vlog_msg "${Dbg}Registered provider: ${Cya}${name}${RCol}${hidden:+ (${Yel}hidden${RCol})}"
  fi
}
export -f register_provider

# --- task pool

# --- application logic

function usage() {
  local detailed=0
  if [[ $# -gt 0 && $1 == "-H" ]]; then
    detailed=1
  fi
  local -a usage
  mapfile -t usage << EOF
$prog $version
$repository

Unify the update process for your entire system.

Usage:
  $prog [options] [--] [provider-spec ...]

  Where [provider-spec] is one of:
    ++provider   inclusive: enable this provider in addition to the default providers
     +provider

      provider   exclusive: enable this provider, disabling default providers

    --provider   ignore this provider from the default providers
     -provider   (after --, see below)

  A lone -- indicates the end of the options, thereafter allowing the use of a single leading - to
  ignore providers as described above.

Options:
  -h       show brief usage information
  -H       show detailed usage information
  -V       show program version
  -s       enable strict mode
  -v       enable verbose output

EOF

  if [[ $detailed -eq 1 ]]; then
    mapfile -tO ${#usage[@]} usage << EOF
Screencast:
  https://asciinema.org/a/191154

Environment Variables:
  Global:
    \$UPDOOT_PROVIDERS_ENABLED (string array)
      The providers to be enabled by default.

    \$UPDOOT_LOG_MAXAGE (int) [$UPDOOT_LOG_MAXAGE]
      Maximum age of log files in days

    \$UPDOOT_STRICT (bool, 0 or 1) [$UPDOOT_STRICT]
      If true, a failure in any part of any update will end the entire update process.
      If false, certain tolerable errors will be treated as warnings.

    \$UPDOOT_VERBOSE (bool, 0 or 1) [$UPDOOT_VERBOSE]
      If true, output additional status information to stderr.

    \$UPDOOT_CACHE_DIR (directory) [$UPDOOT_CACHE_DIR]
      Directory to use for log/runtime/temp files.

Dependencies:
  Global:
     - moment-cli (https://www.npmjs.com/package/moment-cli)
     - termcolors (https://gist.github.com/08007d77853fcea5ca669e6800844c06)
     - git (https://git-scm.com)

EOF
  fi

  mapfile -tO ${#usage[@]} usage << EOF
Available Providers: (* indicates provider is enabled by default)
EOF

  if [[ ${#PROVIDERS[@]} -eq 0 ]]; then
    usage+=("  none")
  else
    for p in "${!PROVIDERS[@]}"; do
      if [[ -v "PROVIDERS_HIDDEN[$p]" && ${PROVIDERS_HIDDEN[$p]} -eq 1 ]]; then
        continue
      fi
      local s="- $p"
      local e
      for e in "${UPDOOT_PROVIDERS_ENABLED[@]}"; do
        if [[ "$p" == "$e" ]]; then
          s="* $p"
          break
        fi
      done
      usage+=("  $s")
      if [[ $detailed -eq 1 ]]; then
        if [[ -v "PROVIDERS_USAGE[$p]" && -n "${PROVIDERS_USAGE[$p]}" ]]; then
          local -a u
          mapfile -t u <<< "${PROVIDERS_USAGE[$p]}"
          usage+=("$(printf "    %s\n" "${u[@]}")")
        fi
        usage+=("")
      fi
    done
  fi

  mapfile -tO ${#usage[@]} usage << EOF

(c) 2019-$(date +%Y) ${authors[*]}

$license License ($license_url)
EOF

  printf '%s\n' "${usage[@]}" >&2
}

function main() {
  vlog_msg "${Dbg}${Pur}${prog}${RCol} [${Cya}${$}${RCol}]"
  if [[ $UID -eq 0 ]]; then
    log_msg "${Err}${Yel}$prog${RCol} should not be run as root!"
    return $C_USAGE_ERR
  fi

  load_configs

  local -a providers_select=()
  local -a providers_add=()
  local -a providers_ignore=()

  local -A providers_opts=()

  local options_done=0
  while [[ $# -gt 0 ]]; do
    local ignore=0
    local add=0
    local orig="$1"
    local r="$1"
    shift
    vlog_msg "${Dbg}parse arg: ${Yel}$r${RCol}"
    shopt -s extglob
    if [[ "$r" =~ ^--[_[:alnum:]] ]]; then
      shopt -u extglob
      vlog_msg "${Dbg}match: ${Pur}"'^--[_[:alnum:]]'"${RCol}"
      ignore=1
      r="${r:2}"
    elif [[ "$r" =~ ^--$ ]]; then
      shopt -u extglob
      vlog_msg "${Dbg}match: ${Pur}"'^--$'"${RCol}"
      options_done=1
      continue
    elif [[ "$r" =~ ^\+\+[_[:alnum:]] ]]; then
      shopt -u extglob
      vlog_msg "${Dbg}match: ${Pur}"'^\+\+[_[:alnum:]]'"${RCol}"
      add=1
      r="${r:2}"
    elif [[ "$r" =~ ^\+[_[:alnum:]] ]]; then
      shopt -u extglob
      vlog_msg "${Dbg}match: ${Pur}"'^\+[_[:alnum:]]'"${RCol}"
      add=1
      r="${r:1}"
    elif [[ "$r" =~ ^-[_[:alnum:]] ]]; then
      shopt -u extglob
      vlog_msg "${Dbg}match: ${Pur}"'^-[_[:alnum:]]'"${RCol}"
      if [[ $options_done -eq 1 ]]; then
        ignore=1
        r="${r:1}"
      else
        local opt OPTARG OPTIND
        OPTIND=1
        while getopts ":hHVvs" opt "$r"; do
          case $opt in
          h)
            usage
            return $C_USAGE
            ;;
          H)
            usage -H
            return $C_USAGE
            ;;
          V)
            echo "$version"
            return $C_USAGE
            ;;
          v)
            UPDOOT_VERBOSE=1
            vlog_msg "${Dbg}UPDOOT_VERBOSE=$UPDOOT_VERBOSE"
            ;;
          s)
            UPDOOT_STRICT=1
            vlog_msg "${Dbg}UPDOOT_STRICT=$UPDOOT_STRICT"
            ;;
          *)
            log_msg "${Err}invalid option: ${Yel}${OPTARG}${RCol} (to disable a provider, use --provider, or disambiguate with -- before using -provider)"
            usage
            return $C_USAGE_ERR
            ;;
          esac
        done
        continue
      fi
    else
      shopt -u extglob
      vlog_msg "${Dbg}no match"
    fi

    local pr="${r/:*/}"
    local pr_opts="${r:${#pr}+1}"

    if [[ -v "PROVIDERS[$pr]" && -n "${PROVIDERS[$pr]}" ]]; then
      if [[ $ignore -eq 1 ]]; then
        if [[ -n "$pr_opts" ]]; then
          log_msg "${Err}options cannot specified with provider negation: ${Yel}${orig}${RCol}"
          return $C_USAGE_ERR
        fi
        providers_ignore+=("$pr")
      elif [[ $add -eq 1 ]]; then
        providers_add+=("$pr")
        providers_opts["$pr"]="$pr_opts"
      else
        providers_select+=("$pr")
        providers_opts["$pr"]="$pr_opts"
      fi
    else
      log_msg "${Err}Unknown provider: ${Yel}${pr}${RCol}"
      return $C_USAGE_ERR
    fi
  done

  lock
  setup

  if [[ ${#providers_select[@]} -eq 0 ]]; then
    providers_select+=("${UPDOOT_PROVIDERS_ENABLED[@]}")
  fi
  if [[ ${#providers_add[@]} -gt 0 ]]; then
    providers_select+=("${providers_add[@]}")
  fi
  update_total=${#providers_select[@]}

  if [[ ${#providers_select[@]} -eq 0 ]]; then
    log_msg "${Err}No providers selected"
    return $C_USAGE_ERR
  fi

  while ((update_index < ${#providers_select[@]})); do
    provider="${providers_select[$update_index]}"
    if [[ ! -v "PROVIDERS[$provider]" ]]; then
      log_msg "${Err}Provider not registered: ${Yel}$provider${RCol}"
      return $C_USAGE_ERR
    fi

    update_provider="$provider"
    update_index=$((update_index + 1))
    local skip=0
    for ignore in "${providers_ignore[@]}"; do
      if [[ $provider == "$ignore" ]]; then
        skip=1
        break
      fi
    done

    if [[ $skip -eq 1 ]]; then
      log_msg "${Wrn}(${Cya}${update_index}${RCol}/${Cya}${#providers_select[@]}${RCol}) Skipping '${Cya}${provider}${RCol}'${RCol}"
      update_skip=$((update_skip + 1))
      continue
    fi

    local -a opts
    if [[ -v "providers_opts[$provider]" ]]; then
      IFS=':' read -ra opts <<< "${providers_opts["$provider"]}"
    fi

    local func start_time histfile lastupdate lastupdate_elapsed lastupdate_cal lastupdate_msg
    func="${PROVIDERS[$provider]}"
    start_time="$(date +%s)"
    histfile="$histdir/$provider"
    lastupdate_msg=""
    if [[ ! -s $histfile ]]; then
      touch "$histfile"
    else
      lastupdate="$(tail -1 "$histfile")"
      lastupdate_cal=$(moment -ci "unix" "$lastupdate")
      lastupdate_elapsed=$(moment -ti "unix" "$lastupdate") # TODO: remove moment.js dependency
      lastupdate_msg=" (last updated ${Pur}$lastupdate_elapsed${RCol} / ${Blu}$lastupdate_cal${RCol} )"
    fi

    log_msg "${Ifo}(${Cya}${update_index}${RCol}/${Cya}${update_total}${RCol}) ${Cya}$provider${RCol}${lastupdate_msg}..."

    local -a cmd=()
    mapfile -O "${#cmd[@]}" -t cmd << EOF
      set -euo pipefail
      IFS=$'\\n\\t'
      trap 'handle_sig -cx $C_INT INT' INT
EOF
    if [[ -v PROVIDERS_VARS["$provider"] ]]; then
      while read -r v; do
        if [[ -v "$v" ]]; then
          cmd+=("$(declare -p "$v")")
        fi
      done <<< "${PROVIDERS_VARS["$provider"]}"
    fi
    mapfile -O "${#cmd[@]}" -t cmd << EOF
      $(declare -f "${func?}")
      $(declare -p PROVIDERS_USAGE)
      $func $(printf '"-%s" ' "${opts[@]}")
EOF
    vlog_msg "${Dbg}running cmd:"
    for l in "${cmd[@]}"; do
      vlog_msg "\t${Yel}${l}${RCol}"
    done
    set +e
    SHELL="$(command -v bash)" script -qec "${cmd[*]}" "${logdir}/${provider}_${start_time}.log"
    code="$?"
    set -e
    unset -v cmd

    local statustype=""
    local statusmsg=""
    local exit=0

    local end_time elapsed
    end_time="$(date +%s)"
    elapsed=$((end_time - start_time))

    # shellcheck disable=2254
    case ${code} in
    0)
      update_success=$((update_success + 1))
      statustype="${Ifo}"
      statusmsg="completed"
      echo "$end_time" >> "$histfile"
      ;;
    $C_INT)
      update_fail=$((update_fail + 1))
      statustype="${Err}"
      statusmsg="interrupted by user"
      exit=1
      ;;
    $C_USAGE)
      update_skip=$((update_skip + 1))
      statustype="${Wrn}"
      statusmsg="skipped"
      code=0
      ;;
    $C_SKIP | $C_DEP_NOTFOUND | $C_USAGE_ERR)
      if [[ $UPDOOT_STRICT -eq 1 ]]; then
        update_fail=$((update_fail + 1))
        statustype="${Err}"
        statusmsg="failed"
        exit=1
      else
        update_skip=$((update_skip + 1))
        statustype="${Wrn}"
        statusmsg="skipped"
        code=0
      fi
      ;;
    *)
      update_fail=$((update_fail + 1))
      statustype="${Err}"
      statusmsg="${Red}failed${RCol} (${Red}code ${code}${RCol})"
      if [[ $UPDOOT_STRICT -eq 1 ]]; then
        exit=1
      fi
      ;;
    esac

    log_msg "${statustype}${Cya}${provider}${RCol} ${statusmsg} (${Pur}${elapsed} seconds elapsed${RCol})"

    if [[ $exit -eq 1 ]]; then
      if [[ $update_index -lt $update_total ]]; then
        case "$(choose "Continue with ${Cya}$((update_total - update_index))${RCol} remaining updates?" "continue" "quit" "Retry")" in
        c)
          log_msg "${Ifo}Continuing...${RCol}"
          ;;
        q)
          log_msg "${Ifo}Exiting...${RCol}"
          return $code
          ;;
        R)
          log_msg "${Ifo}Retrying...${RCol}"
          update_index=$((update_index - 1))
          ;;
        *)
          return $C_UNKNOWN
          ;;
        esac
      else
        case "$(choose "Retry?" "quit" "Retry")" in
        q)
          log_msg "${Ifo}Exiting...${RCol}"
          return $code
          ;;
        R)
          log_msg "${Ifo}Retrying...${RCol}"
          update_index=$((update_index - 1))
          ;;
        *)
          return $C_UNKNOWN
          ;;
        esac
      fi
    fi

    log_msg ' ---'
  done

  return 0
}

trap 'handle_exit' EXIT
trap 'handle_sig TERM' TERM
trap 'handle_sig ILL' ILL
trap 'handle_sig HUP' HUP
trap 'handle_sig INT' INT

main "$@"
