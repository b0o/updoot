#!/usr/bin/env bash

# archlinux-mirrors unifies the maintenance of mirrorlists for pacman
#
# NOTE(b0o): after removing support for powerpill, this helper is not super useful anymore
#
# Copyright (c) 2018-2022 Maddison Hellstrom <github.com/b0o>
# MIT License

set -euo pipefail
IFS=$'\n\t'

declare -g prog="archlinux-mirrors"

declare -g country

declare -g mirrorlist_url="https://archlinux.org/mirrorlist/all/"
declare -g mirrorlist_new="/etc/pacman.d/mirrorlist.pacnew"
declare -g mirrorlist="/etc/pacman.d/mirrorlist"

declare -gi insecure=0

declare -gi pacman_n=10

declare -ga tmp_files=()

function cleanup() {
  rm "${tmp_files[@]}" &>/dev/null || true
}

function update_pacman() {
  if [[ ! -f "$mirrorlist_new" ]]; then
    echo "mirrorlist is up-to-date" >&2
    return 0
  fi

  local proto="https"
  if [[ $insecure -eq 1 ]]; then
    proto="https?"
  fi

  local tmp
  tmp="$(mktemp -u "/tmp/mirrorlist-XXXX")"
  tmp_files+=("$tmp")
  awk -v "proto=^${proto}$" -v "country=$country" '
    BEGIN {
      a = 0
      FS = "[: ]"
    }

    $0 == "## " country {
      b = 1
      next
    }

    /##/{
      b = 0
    }

    /#?Server = / {
      if (b == 1 && $3 ~ proto) {
        print "Server = " $3 ":" $4
      }
    }
  ' <"$mirrorlist_new" >"$tmp"

  echo "ranking mirrors..." >&2
  tmp_files+=("${tmp}-ranked")
  rankmirrors -vn "$pacman_n" "$tmp" | tee "${tmp}-ranked"
  echo "rankmirrors success" >&2

  echo "installing new mirrorlist to ${mirrorlist}..." >&2
  mv "${tmp}-ranked" "$mirrorlist"

  tmp_files+=("$mirrorlist_new")

  echo "cleaning up..." >&2
  rm "$tmp"
}

function main() {
  local country="United States"
  local -i force=0
  local -i update_specified=0
  local -i update_pacman=1
  while [[ $# -gt 0 ]]; do
    if [[ $1 =~ ^- ]]; then
      case "$1" in
      -a | --all | --pacman)
        if [[ $update_specified -eq 0 ]]; then
          update_specified=1
          update_pacman=0
        fi
        ;;& # continue matching
      -a | --all)
        update_pacman=1
        ;;
      --pacman)
        update_pacman=1
        ;;
      -c | --country)
        if [[ $# -lt 2 ]]; then
          echo "error: argument --country requires a value" >&2
          return 1
        fi
        country="$2"
        shift
        ;;
      -f | --force)
        force=1
        ;;
      -i | --insecure)
        insecure=1
        ;;
      -h | --help)
        echo "usage: $prog [opts] [country]"
        return 0
        ;;
      *)
        echo "error: invalid argument $1" >&2
        return 1
        ;;
      esac
      shift
    fi
  done

  if [[ $UID -ne 0 ]]; then
    echo "error: $prog must be run as root" >&2
    return 1
  fi

  if [[ ! -e "$mirrorlist_new" ]]; then
    if [[ $force -eq 0 ]]; then
      echo "mirrorlist is up-to-date" >&2
      return 0
    fi
    if [[ $update_pacman -eq 1 ]]; then
      curl -Lo "$mirrorlist_new" "$mirrorlist_url"
    fi
  fi

  if [[ $update_pacman -eq 1 ]]; then
    echo "updating mirrors (pacman) ($country)" >&2
    update_pacman "$@"
  fi

  echo "$prog finished" >&2
}

trap cleanup EXIT

main "$@"
