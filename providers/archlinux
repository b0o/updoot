#!/usr/bin/env bash

# updoot unifies the update process for your entire system
#
# Copyright (c) 2018-2020 Maddison Hellstrom (github.com/b0o)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail
IFS=$'\n\t'

# Force shellcheck to source ../updoot
true || source "../updoot"

declare -xg UPDOOT_ARCHLINUX_MIRROR_COUNTRY="${UPDOOT_ARCHLINUX_MIRROR_COUNTRY:-United States}"

function update_archlinux() {
  if ! cmd_exists pacman &> /dev/null; then
    return $C_DEP_NOTFOUND
  fi
  local -i tasklist_modified=0
  local -i task_news=1
  local -i task_yay=1
  local -i task_pacman=1
  local -i task_mirrorlist=1
  local -i task_pacdiff=1
  local opt OPTARG OPTIND
  OPTIND=1
  while getopts ":hanypmdNYPMD" opt "$@"; do
    case "$opt" in
    h)
      # shellcheck disable=2119
      provider_usage
      return $C_USAGE
      ;;
    a)
      task_news=1
      task_yay=1
      task_pacman=1
      task_mirrorlist=1
      task_pacdiff=1
      ;;
    n | y | p | m | d)
      if [[ $tasklist_modified -eq 0 ]]; then
        tasklist_modified=1
        task_news=0
        task_yay=0
        task_pacman=0
        task_mirrorlist=0
        task_pacdiff=0
      fi
      ;;& # continue matching
    n)
      task_news=1
      ;;
    N)
      task_news=0
      ;;
    y)
      task_yay=1
      ;;
    Y)
      task_yay=0
      ;;
    p)
      task_pacman=1
      ;;
    P)
      task_pacman=0
      ;;
    m)
      task_mirrorlist=1
      ;;
    M)
      task_mirrorlist=0
      ;;
    d)
      task_pacdiff=1
      ;;
    D)
      task_pacdiff=0
      ;;
    \?)
      log_msg "${Err}${Cya}archlinux${RCol}: invalid option: ${Yel}${OPTARG}${RCol}"
      return $C_USAGE_ERR
      ;;
    esac
  done

  local newscachefile newsout newsdiff
  if ((task_news)); then
    if cmd_exists archlinux-news; then
      newscachefile="$UPDOOT_CACHE_DIR/archlinux-news"
      if [[ ! -s $newscachefile ]]; then
        touch "$newscachefile"
      fi
      newsout="$(archlinux-news 10)"
      newsdiff=$(diff --old-line-format='' --unchanged-line-format='' --new-line-format='%L' -Z "$newscachefile" <(echo "$newsout")) || :
      if [[ $newsdiff != "" ]]; then
        log_msg "${Wrn}New '${UCya}https://archlinux.org${RCol}' news item(s) since last update:"
        log_msg "${Red}${newsdiff}${RCol}"
        if [[ $(choose "Continue with archlinux update?") != "y" ]]; then
          log_msg "${Wrn}Skipping..."
          return $C_SKIP
        fi
      else
        log_msg "${Ifo}No unread news items from ${UCya}https://archlinux.org${RCol}"
      fi
    else
      log_msg "${Wrn}${Yel}archlinux-news${RCol} helper script not found; It is recommended to check ${UCya}https://archlinux.org${RCol} for news prior to updating"
      if [[ "$(choose "Continue with archlinux update?")" != "y" ]]; then
        return $C_SKIP
      fi
    fi
  fi

  if ((task_yay || task_pacman)); then
    if ((task_yay)) && cmd_exists yay; then
      run_cmd yay -Syyu
    elif ((task_pacman)) && cmd_exists pacman; then
      run_cmd sudo pacman -Syu
    else
      return $C_DEP_NOTFOUND
    fi
  fi

  if ((task_mirrorlist)) && cmd_exists archlinux-mirrors; then
    run_cmd sudo archlinux-mirrors --pacman --country "$UPDOOT_ARCHLINUX_MIRROR_COUNTRY"
  fi

  if ((task_pacdiff)) && cmd_exists pacdiff; then
    # use sudo -E so that user's DIFFTOOL is preserved
    run_cmd sudo -E pacdiff
  fi

  if [[ -n "${newsout:-}" ]]; then
    echo "$newsout" > "$newscachefile"
  fi
  return 0
}
register_provider update_archlinux archlinux << EOF
Updates Arch Linux & performs routine maintenence like updating mirrorlist & managing .pac{new,save} files
Dependencies:
  Primary: (at least one; ordered by precedence)
    - yay (aur: yay) (https://github.com/Jguer/yay)
    or
    - pacman
  Required:
    - sudo (arch-repo: sudo) (https://www.sudo.ws)
  Optional:
    - archlinux-news
      Automatically check for unread RSS items from the archlinux.org news feed
      Dependencies:
        - curl (arch-repo: curl) (https://curl.haxx.se)
        - xmlstarlet (arch-repo: xmlstarlet) (https://xmlstar.sourceforge.net)
    - reflector (arch-repo: reflector) (https://xyne.archlinux.ca/projects/reflector)
      Finds the fastest mirrors and updates mirrorlist for pacman.
    - pacdiff (arch-repo: pacman-contrib) (https://git.archlinux.org/pacman-contrib.git/about)
      A simple program to merge or remove pacnew/pacsave files.

Options:
  General:
  :h   display usage information
  :a   enable all tasks (default)

  Enable tasks exclusively:
  :n   archlinux-news
  :y   yay
  :p   pacman
  :m   archlinux-mirrors
  :d   pacdiff

  Exclude tasks:
  :N   archlinux-news
  :Y   yay
  :P   pacman
  :M   archlinux-mirrors
  :D   pacdiff

Environment Variables:
  \$UPDOOT_ARCHLINUX_MIRROR_COUNTRY (country name) [$UPDOOT_ARCHLINUX_MIRROR_COUNTRY]
    Country to select mirrors from.
    Must match the format used in /etc/pacman.d/mirrorlist

EOF
